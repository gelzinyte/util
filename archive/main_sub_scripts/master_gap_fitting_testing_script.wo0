#!/bin/bash
#$ -pe smp 16        # number of cores requested
#$ -l h_rt=12:00:00  # time requested in HH:MM:SS format
#$ -S /bin/bash      # shell to run the job in
#$ -N rnd0.1 
#$ -j yes            # combine error and output logs
#$ -cwd              # execute job in directory from which it was submitted

echo $(date)

test_dset=../xyzs/test.xyz


e_sigma=0.005
f_sigma=0.05

l_max=6
n_max=12
cutoff=5
delta=1
zeta=4
n_sparse=800

cutoff_soap_1=3
atom_gaussian_width_1=0.3
cutoff_transition_width_1=0.5

cutoff_soap_2=6
atom_gaussian_width_2=0.6
cutoff_transition_width_2=1

tb_nsp=20
tb_cut=3

hh_del=1
hc_del=1
cc_del=1

dset_sizes=( 500 50 100 200 1500 )

source /home/eg475/programs/miniconda3/etc/profile.d/conda.sh
conda activate wo0 
export  OMP_NUM_THREADS=${NSLOTS}

mkdir -p xyzs 

for dset_size in "${dset_sizes[@]}"
do

	gap_name=gap${dset_size}
	train_dset=../xyzs/train${dset_size}.xyz


	eval_train_name=xyzs/${gap_name}_on_train.xyz
	eval_test_name=xyzs/${gap_name}_on_test.xyz

	echo "gap_name: ${gap_name};"
	echo "train_fname: ${train_dset}"


	#/home/eg475/programs/QUIPwo0/build/linux_x86_64_gfortran_openmp/gap_fit energy_parameter_name=dft_energy force_parameter_name=dft_forces  sparse_separate_file=F default_sigma={${e_sigma} ${f_sigma} 0.0 0.0} config_type_kernel_regularisation={isolated_atom:0.0001:0.0:0.0:0.0}  gap={soap l_max=$l_max n_max=$n_max cutoff=$cutoff_soap_1 delta=$delta covariance_type=dot_product zeta=$zeta n_sparse=$n_sparse sparse_method=cur_points atom_gaussian_width=$atom_gaussian_width_1 cutoff_transition_width=$cutoff_transition_width_1 add_species=True : soap l_max=$l_max n_max=$n_max cutoff=$cutoff_soap_2 delta=$delta covariance_type=dot_product zeta=$zeta n_sparse=$n_sparse sparse_method=cur_points atom_gaussian_width=$atom_gaussian_width_2 cutoff_transition_width=$cutoff_transition_width_2 add_species=True : distance_2b cutoff=$tb_cut cutoff_transition_width=1.0 Z1=1 Z2=1 n_sparse=${tb_nsp} covariance_type=ard_se theta_uniform=1.0 sparse_method=uniform add_species=F delta=$hh_del : distance_2b cutoff=$tb_cut cutoff_transition_width=1.0 Z1=1 Z2=6 n_sparse=${tb_nsp} covariance_type=ard_se theta_uniform=1.0 sparse_method=uniform add_species=F delta=$hc_del : distance_2b cutoff=$tb_cut cutoff_transition_width=1.0 Z1=6 Z2=6 n_sparse=${tb_nsp} covariance_type=ard_se theta_uniform=1.0 sparse_method=uniform add_species=F delta=$cc_del} atoms_filename=$train_dset gp_file=${gap_name}.xml > out_${gap_name}.txt 2>&1


	#/home/eg475/programs/QUIPwo0/build/linux_x86_64_gfortran_openmp/quip E=T F=T atoms_filename=${train_dset} param_filename=${gap_name}.xml  | grep AT | sed 's/AT//' > $eval_train_name
	#/home/eg475/programs/QUIPwo0/build/linux_x86_64_gfortran_openmp/quip E=T F=T atoms_filename=${test_dset} param_filename=${gap_name}.xml  | grep AT | sed 's/AT//' > $eval_test_name


	#python ~/scripts/gap_plots_evaled.py --ref_energy_name dft_energy --ref_force_name dft_forces --pred_energy_name energy --pred_force_name force --evaluated_train_fname $eval_train_name --evaluated_test_fname $eval_test_name  --prefix ${gap_name}_F_by_element

	#python ~/scripts/gap_plots_evaled.py --ref_energy_name dft_energy --ref_force_name dft_forces --pred_energy_name energy --pred_force_name force --evaluated_train_fname $eval_train_name --evaluated_test_fname $eval_test_name  --prefix ${gap_name}_F_overview --force_by_element False

	#python ~/scripts/gap_plots_evaled.py --ref_energy_name dft_energy --ref_force_name dft_forces --pred_energy_name energy --pred_force_name force --evaluated_train_fname $eval_train_name --evaluated_test_fname $eval_test_name  --prefix ${gap_name}_F_overview --force_by_element False --by_config_type True


	#gap_plots --param_fname ${gap_name}.xml --prefix $gap_name --plot_2b_contribution=True --scatter_plot=False

	#python -c "from util import plot; plot.evec_plot('${gap_name}.xml', 'dft_min_tbu.xyz', at_fname_to_opt='dft')"

done

# learning curve
#python -c "from util.plot import learning_curves as lc; lc.learning_curves([50, 100, 200, 500], prefix='learning_curve_rnd0.1_2b_2soap', error_measure='rmse_over_std')"

#python -c "from util.plot import learning_curves as lc; lc.learning_curves([50, 100, 200, 500], prefix='learning_curve_rnd0.1_2b_2soap',  error_measure='rmse')"

export  OMP_NUM_THREADS=1

python /home/eg475/scripts/gopt_test/gap_geo_opt_test.py --gap_fname gap500.xml --no_cores $NSLOTS --dft_eq_xyz dft_min_tbu.xyz --temps '[30, 100, 300, 1000]' --stds '[0.01, 0.03, 0.1, 0.3]' 'C(C)(C)C'


python -c "from util.plot import gopt; gopt.compare([('.', 'dft_min_tbu.xyz', ['C(C)(C)C'], [30, 100, 300], [0.01, 0.03, 0.1, 0.3], {'color':'tab:red', 'label':'random 0.1'})], task='soap_plot', prefix='gopt_rnd0.1')"

